/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { throwError, of } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { LocalDatabase } from './databases/local-database';
import { JSONValidator } from './validation/json-validator';
import * as i0 from "@angular/core";
import * as i1 from "./databases/local-database";
import * as i2 from "./validation/json-validator";
/**
 * @record
 */
export function LSGetItemOptions() { }
if (false) {
    /** @type {?|undefined} */
    LSGetItemOptions.prototype.schema;
}
export class LocalStorage {
    /**
     * @param {?} database
     * @param {?} jsonValidator
     */
    constructor(database, jsonValidator) {
        this.database = database;
        this.jsonValidator = jsonValidator;
        this.getItemOptionsDefault = {
            schema: null
        };
    }
    /**
     * @template T
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    getItem(key, options = this.getItemOptionsDefault) {
        return this.database.getItem(key).pipe(
        /* Validate data upon a json schema if requested */
        mergeMap((data) => {
            if (data === null) {
                return of(null);
            }
            else if (options.schema) {
                /** @type {?} */
                let validation = true;
                try {
                    validation = this.jsonValidator.validate(data, options.schema);
                }
                catch (error) {
                    return throwError(error);
                }
                if (!validation) {
                    return throwError(new Error(`JSON invalid`));
                }
            }
            return of((/** @type {?} */ (data)));
        }));
    }
    /**
     * Gets an item value in local storage WITHOUT any validation.
     * It is a convenience method for development only: do NOT use it in production code,
     * as it can cause security issues and errors and may be removed in future versions.
     * Use the normal .getItem() method instead.
     * @ignore
     * @deprecated
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getUnsafeItem(key) {
        return this.database.getItem(key);
    }
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    setItem(key, data) {
        return this.database.setItem(key, data);
    }
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    removeItem(key) {
        return this.database.removeItem(key);
    }
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    clear() {
        return this.database.clear();
    }
    /**
     * Sets an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?}
     */
    setItemSubscribe(key, data) {
        this.setItem(key, data).subscribe(() => { }, () => { });
    }
    /**
     * Deletes an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @return {?}
     */
    removeItemSubscribe(key) {
        this.removeItem(key).subscribe(() => { }, () => { });
    }
    /**
     * Deletes all items from local storage, and auto-subscribes
     * @return {?}
     */
    clearSubscribe() {
        this.clear().subscribe(() => { }, () => { });
    }
}
LocalStorage.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LocalStorage.ctorParameters = () => [
    { type: LocalDatabase },
    { type: JSONValidator }
];
/** @nocollapse */ LocalStorage.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(i0.inject(i1.LocalDatabase), i0.inject(i2.JSONValidator)); }, token: LocalStorage, providedIn: "root" });
if (false) {
    /** @type {?} */
    LocalStorage.prototype.getItemOptionsDefault;
    /** @type {?} */
    LocalStorage.prototype.database;
    /** @type {?} */
    LocalStorage.prototype.jsonValidator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL2xpYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxVQUFVLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7O0FBRTVELHNDQUVDOzs7SUFEQyxrQ0FBMkI7O0FBTTdCLE1BQU0sT0FBTyxZQUFZOzs7OztJQU12QixZQUFzQixRQUF1QixFQUFZLGFBQTRCO1FBQS9ELGFBQVEsR0FBUixRQUFRLENBQWU7UUFBWSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUpsRSwwQkFBcUIsR0FBcUI7WUFDM0QsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDO0lBRXNGLENBQUM7Ozs7Ozs7SUFTekYsT0FBTyxDQUFVLEdBQVcsRUFBRSxPQUFPLEdBQUcsSUFBSSxDQUFDLHFCQUFxQjtRQUVoRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUk7UUFFdkMsbURBQW1EO1FBQ25ELFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBRWhCLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtnQkFFakIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFFakI7aUJBQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFOztvQkFFckIsVUFBVSxHQUFHLElBQUk7Z0JBRXJCLElBQUk7b0JBQ0YsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ2hFO2dCQUFDLE9BQU8sS0FBSyxFQUFFO29CQUNkLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMxQjtnQkFFRCxJQUFJLENBQUMsVUFBVSxFQUFFO29CQUNmLE9BQU8sVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7aUJBQzlDO2FBRUY7WUFFRCxPQUFPLEVBQUUsQ0FBQyxtQkFBQSxJQUFJLEVBQVcsQ0FBQyxDQUFDO1FBRTdCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFUixDQUFDOzs7Ozs7Ozs7Ozs7SUFZRCxhQUFhLENBQVUsR0FBVztRQUVoQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFJLEdBQUcsQ0FBQyxDQUFDO0lBRXZDLENBQUM7Ozs7Ozs7SUFRQSxPQUFPLENBQUMsR0FBVyxFQUFFLElBQVM7UUFFN0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFMUMsQ0FBQzs7Ozs7O0lBT0EsVUFBVSxDQUFDLEdBQVc7UUFFckIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV2QyxDQUFDOzs7OztJQU1BLEtBQUs7UUFFSixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFL0IsQ0FBQzs7Ozs7OztJQU9ELGdCQUFnQixDQUFDLEdBQVcsRUFBRSxJQUFTO1FBRXJDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFFeEQsQ0FBQzs7Ozs7O0lBTUEsbUJBQW1CLENBQUMsR0FBVztRQUU5QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFFckQsQ0FBQzs7Ozs7SUFHRCxjQUFjO1FBRVosSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFFN0MsQ0FBQzs7O1lBOUhGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVZRLGFBQWE7WUFFYixhQUFhOzs7OztJQVdwQiw2Q0FFRTs7SUFFVSxnQ0FBaUM7O0lBQUUscUNBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBMb2NhbERhdGFiYXNlIH0gZnJvbSAnLi9kYXRhYmFzZXMvbG9jYWwtZGF0YWJhc2UnO1xuaW1wb3J0IHsgSlNPTlNjaGVtYSB9IGZyb20gJy4vdmFsaWRhdGlvbi9qc29uLXNjaGVtYSc7XG5pbXBvcnQgeyBKU09OVmFsaWRhdG9yIH0gZnJvbSAnLi92YWxpZGF0aW9uL2pzb24tdmFsaWRhdG9yJztcblxuZXhwb3J0IGludGVyZmFjZSBMU0dldEl0ZW1PcHRpb25zIHtcbiAgc2NoZW1hPzogSlNPTlNjaGVtYSB8IG51bGw7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZSB7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGdldEl0ZW1PcHRpb25zRGVmYXVsdDogTFNHZXRJdGVtT3B0aW9ucyA9IHtcbiAgICBzY2hlbWE6IG51bGxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGF0YWJhc2U6IExvY2FsRGF0YWJhc2UsIHByb3RlY3RlZCBqc29uVmFsaWRhdG9yOiBKU09OVmFsaWRhdG9yKSB7fVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0gdmFsdWUgaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIFRoZSBpdGVtJ3MgdmFsdWUgaWYgdGhlIGtleSBleGlzdHMsIG51bGwgb3RoZXJ3aXNlLCB3cmFwcGVkIGluIGFuIFJ4SlMgT2JzZXJ2YWJsZVxuICAgKi9cbiAgZ2V0SXRlbTxUID0gYW55PihrZXk6IHN0cmluZywgb3B0aW9uczogTFNHZXRJdGVtT3B0aW9ucyAmIHsgc2NoZW1hOiBKU09OU2NoZW1hIH0pOiBPYnNlcnZhYmxlPFQgfCBudWxsPjtcbiAgZ2V0SXRlbTxUID0gYW55PihrZXk6IHN0cmluZywgb3B0aW9ucz86IExTR2V0SXRlbU9wdGlvbnMpOiBPYnNlcnZhYmxlPHVua25vd24+O1xuICBnZXRJdGVtPFQgPSBhbnk+KGtleTogc3RyaW5nLCBvcHRpb25zID0gdGhpcy5nZXRJdGVtT3B0aW9uc0RlZmF1bHQpIHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLmdldEl0ZW08VD4oa2V5KS5waXBlKFxuXG4gICAgICAvKiBWYWxpZGF0ZSBkYXRhIHVwb24gYSBqc29uIHNjaGVtYSBpZiByZXF1ZXN0ZWQgKi9cbiAgICAgIG1lcmdlTWFwKChkYXRhKSA9PiB7XG5cbiAgICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcblxuICAgICAgICAgIHJldHVybiBvZihudWxsKTtcblxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuc2NoZW1hKSB7XG5cbiAgICAgICAgICBsZXQgdmFsaWRhdGlvbiA9IHRydWU7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsaWRhdGlvbiA9IHRoaXMuanNvblZhbGlkYXRvci52YWxpZGF0ZShkYXRhLCBvcHRpb25zLnNjaGVtYSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKG5ldyBFcnJvcihgSlNPTiBpbnZhbGlkYCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9mKGRhdGEgYXMgdW5rbm93bik7XG5cbiAgICAgIH0pKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gaXRlbSB2YWx1ZSBpbiBsb2NhbCBzdG9yYWdlIFdJVEhPVVQgYW55IHZhbGlkYXRpb24uXG4gICAqIEl0IGlzIGEgY29udmVuaWVuY2UgbWV0aG9kIGZvciBkZXZlbG9wbWVudCBvbmx5OiBkbyBOT1QgdXNlIGl0IGluIHByb2R1Y3Rpb24gY29kZSxcbiAgICogYXMgaXQgY2FuIGNhdXNlIHNlY3VyaXR5IGlzc3VlcyBhbmQgZXJyb3JzIGFuZCBtYXkgYmUgcmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMuXG4gICAqIFVzZSB0aGUgbm9ybWFsIC5nZXRJdGVtKCkgbWV0aG9kIGluc3RlYWQuXG4gICAqIEBpZ25vcmVcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcmV0dXJucyBUaGUgaXRlbSdzIHZhbHVlIGlmIHRoZSBrZXkgZXhpc3RzLCBudWxsIG90aGVyd2lzZSwgd3JhcHBlZCBpbiBhbiBSeEpTIE9ic2VydmFibGVcbiAgICovXG4gIGdldFVuc2FmZUl0ZW08VCA9IGFueT4oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQgfCBudWxsPiB7XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZS5nZXRJdGVtPFQ+KGtleSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIFRoZSBpdGVtJ3MgdmFsdWUsIG11c3QgTk9UIGJlIG51bGwgb3IgdW5kZWZpbmVkXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2Uuc2V0SXRlbShrZXksIGRhdGEpO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZS5yZW1vdmVJdGVtKGtleSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBpdGVtcyBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICAgY2xlYXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZS5jbGVhcigpO1xuXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2UsIGFuZCBhdXRvLXN1YnNjcmliZXNcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcGFyYW0gZGF0YSBUaGUgaXRlbSdzIHZhbHVlLCBtdXN0IE5PVCBiZSBudWxsIG9yIHVuZGVmaW5lZFxuICAgKi9cbiAgc2V0SXRlbVN1YnNjcmliZShrZXk6IHN0cmluZywgZGF0YTogYW55KTogdm9pZCB7XG5cbiAgICB0aGlzLnNldEl0ZW0oa2V5LCBkYXRhKS5zdWJzY3JpYmUoKCkgPT4ge30sICgpID0+IHt9KTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlLCBhbmQgYXV0by1zdWJzY3JpYmVzXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICovXG4gICByZW1vdmVJdGVtU3Vic2NyaWJlKGtleTogc3RyaW5nKTogdm9pZCB7XG5cbiAgICB0aGlzLnJlbW92ZUl0ZW0oa2V5KS5zdWJzY3JpYmUoKCkgPT4ge30sICgpID0+IHt9KTtcblxuICB9XG5cbiAgLyoqIERlbGV0ZXMgYWxsIGl0ZW1zIGZyb20gbG9jYWwgc3RvcmFnZSwgYW5kIGF1dG8tc3Vic2NyaWJlcyAqL1xuICBjbGVhclN1YnNjcmliZSgpOiB2b2lkIHtcblxuICAgIHRoaXMuY2xlYXIoKS5zdWJzY3JpYmUoKCkgPT4ge30sICgpID0+IHt9KTtcblxuICB9XG5cbn1cbiJdfQ==