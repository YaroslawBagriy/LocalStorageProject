/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { of, throwError } from 'rxjs';
import { LOCAL_STORAGE_PREFIX } from '../tokens';
import * as i0 from "@angular/core";
import * as i1 from "../tokens";
var LocalStorageDatabase = /** @class */ (function () {
    function LocalStorageDatabase(userPrefix) {
        if (userPrefix === void 0) { userPrefix = null; }
        this.userPrefix = userPrefix;
        /* Initializing native localStorage right now to be able to check its support on class instanciation */
        this.prefix = '';
        if (userPrefix) {
            this.prefix = userPrefix + "_";
        }
    }
    /**
     * Gets an item value in local storage
     * @param key The item's key
     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    LocalStorageDatabase.prototype.getItem = /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    function (key) {
        /** @type {?} */
        var unparsedData = localStorage.getItem("" + this.prefix + key);
        /** @type {?} */
        var parsedData = null;
        if (unparsedData != null) {
            try {
                parsedData = JSON.parse(unparsedData);
            }
            catch (error) {
                return throwError(new Error("Invalid data in localStorage."));
            }
        }
        return of(parsedData);
    };
    /**
     * Sets an item in local storage
     * @param key The item's key
     * @param data The item's value, must NOT be null or undefined
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    LocalStorageDatabase.prototype.setItem = /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function (key, data) {
        localStorage.setItem("" + this.prefix + key, JSON.stringify(data));
        return of(true);
    };
    /**
     * Deletes an item in local storage
     * @param key The item's key
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    LocalStorageDatabase.prototype.removeItem = /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function (key) {
        localStorage.removeItem("" + this.prefix + key);
        return of(true);
    };
    /**
     * Deletes all items from local storage
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    LocalStorageDatabase.prototype.clear = /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function () {
        localStorage.clear();
        return of(true);
    };
    LocalStorageDatabase.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LocalStorageDatabase.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
    ]; };
    /** @nocollapse */ LocalStorageDatabase.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorageDatabase_Factory() { return new LocalStorageDatabase(i0.inject(i1.LOCAL_STORAGE_PREFIX, 8)); }, token: LocalStorageDatabase, providedIn: "root" });
    return LocalStorageDatabase;
}());
export { LocalStorageDatabase };
if (false) {
    /** @type {?} */
    LocalStorageDatabase.prototype.prefix;
    /** @type {?} */
    LocalStorageDatabase.prototype.userPrefix;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxzdG9yYWdlLWRhdGFiYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9kYXRhYmFzZXMvbG9jYWxzdG9yYWdlLWRhdGFiYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFjLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHbEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sV0FBVyxDQUFDOzs7QUFFakQ7SUFRRSw4QkFBZ0UsVUFBZ0M7UUFBaEMsMkJBQUEsRUFBQSxpQkFBZ0M7UUFBaEMsZUFBVSxHQUFWLFVBQVUsQ0FBc0I7O1FBRnRGLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFJcEIsSUFBSSxVQUFVLEVBQUU7WUFDZCxJQUFJLENBQUMsTUFBTSxHQUFNLFVBQVUsTUFBRyxDQUFDO1NBQ2hDO0lBRUgsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7SUFDSCxzQ0FBTzs7Ozs7O0lBQVAsVUFBaUIsR0FBVzs7WUFFcEIsWUFBWSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUssQ0FBQzs7WUFDN0QsVUFBVSxHQUFhLElBQUk7UUFFL0IsSUFBSSxZQUFZLElBQUksSUFBSSxFQUFFO1lBRXhCLElBQUk7Z0JBQ0YsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDdkM7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxPQUFPLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUM7YUFDL0Q7U0FFRjtRQUVELE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXhCLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7OztJQUNILHNDQUFPOzs7Ozs7SUFBUCxVQUFRLEdBQVcsRUFBRSxJQUFTO1FBRTVCLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFbkUsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbEIsQ0FBQztJQUVEOzs7O09BSUc7Ozs7OztJQUNILHlDQUFVOzs7OztJQUFWLFVBQVcsR0FBVztRQUVwQixZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFLLENBQUMsQ0FBQztRQUVoRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVsQixDQUFDO0lBRUQ7OztPQUdHOzs7OztJQUNILG9DQUFLOzs7O0lBQUw7UUFFRSxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFckIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbEIsQ0FBQzs7Z0JBN0VGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0RBTWMsUUFBUSxZQUFJLE1BQU0sU0FBQyxvQkFBb0I7OzsrQkFkdEQ7Q0FxRkMsQUEvRUQsSUErRUM7U0E1RVksb0JBQW9COzs7SUFHL0Isc0NBQXNCOztJQUVWLDBDQUFvRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IExvY2FsRGF0YWJhc2UgfSBmcm9tICcuL2xvY2FsLWRhdGFiYXNlJztcbmltcG9ydCB7IExPQ0FMX1NUT1JBR0VfUFJFRklYIH0gZnJvbSAnLi4vdG9rZW5zJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlRGF0YWJhc2UgaW1wbGVtZW50cyBMb2NhbERhdGFiYXNlIHtcblxuICAvKiBJbml0aWFsaXppbmcgbmF0aXZlIGxvY2FsU3RvcmFnZSByaWdodCBub3cgdG8gYmUgYWJsZSB0byBjaGVjayBpdHMgc3VwcG9ydCBvbiBjbGFzcyBpbnN0YW5jaWF0aW9uICovXG4gIHByb3RlY3RlZCBwcmVmaXggPSAnJztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KExPQ0FMX1NUT1JBR0VfUFJFRklYKSBwcm90ZWN0ZWQgdXNlclByZWZpeDogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcblxuICAgIGlmICh1c2VyUHJlZml4KSB7XG4gICAgICB0aGlzLnByZWZpeCA9IGAke3VzZXJQcmVmaXh9X2A7XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBpdGVtIHZhbHVlIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcmV0dXJucyBUaGUgaXRlbSdzIHZhbHVlIGlmIHRoZSBrZXkgZXhpc3RzLCBudWxsIG90aGVyd2lzZSwgd3JhcHBlZCBpbiBhbiBSeEpTIE9ic2VydmFibGVcbiAgICovXG4gIGdldEl0ZW08VCA9IGFueT4oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQgfCBudWxsPiB7XG5cbiAgICBjb25zdCB1bnBhcnNlZERhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgJHt0aGlzLnByZWZpeH0ke2tleX1gKTtcbiAgICBsZXQgcGFyc2VkRGF0YTogVCB8IG51bGwgPSBudWxsO1xuXG4gICAgaWYgKHVucGFyc2VkRGF0YSAhPSBudWxsKSB7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKHVucGFyc2VkRGF0YSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgRXJyb3IoYEludmFsaWQgZGF0YSBpbiBsb2NhbFN0b3JhZ2UuYCkpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIG9mKHBhcnNlZERhdGEpO1xuXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcGFyYW0gZGF0YSBUaGUgaXRlbSdzIHZhbHVlLCBtdXN0IE5PVCBiZSBudWxsIG9yIHVuZGVmaW5lZFxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gIHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7dGhpcy5wcmVmaXh9JHtrZXl9YCwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuXG4gICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcmV0dXJucyBBbiBSeEpTIE9ic2VydmFibGUgdG8gd2FpdCB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb25cbiAgICovXG4gIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGAke3RoaXMucHJlZml4fSR7a2V5fWApO1xuXG4gICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgaXRlbXMgZnJvbSBsb2NhbCBzdG9yYWdlXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgY2xlYXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcblxuICAgIHJldHVybiBvZih0cnVlKTtcblxuICB9XG5cbn1cbiJdfQ==